// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/vmware-labs/marketplace-cli/v2/internal"
	"github.com/vmware-labs/marketplace-cli/v2/internal/models"
)

type FakeUploader struct {
	HashStub        func(string) (string, string, error)
	hashMutex       sync.RWMutex
	hashArgsForCall []struct {
		arg1 string
	}
	hashReturns struct {
		result1 string
		result2 string
		result3 error
	}
	hashReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	UploadStub        func(string) (string, error)
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		arg1 string
	}
	uploadReturns struct {
		result1 string
		result2 error
	}
	uploadReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UploadFileStub        func(string) (*models.ProductDeploymentFile, error)
	uploadFileMutex       sync.RWMutex
	uploadFileArgsForCall []struct {
		arg1 string
	}
	uploadFileReturns struct {
		result1 *models.ProductDeploymentFile
		result2 error
	}
	uploadFileReturnsOnCall map[int]struct {
		result1 *models.ProductDeploymentFile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUploader) Hash(arg1 string) (string, string, error) {
	fake.hashMutex.Lock()
	ret, specificReturn := fake.hashReturnsOnCall[len(fake.hashArgsForCall)]
	fake.hashArgsForCall = append(fake.hashArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Hash", []interface{}{arg1})
	fake.hashMutex.Unlock()
	if fake.HashStub != nil {
		return fake.HashStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.hashReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUploader) HashCallCount() int {
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	return len(fake.hashArgsForCall)
}

func (fake *FakeUploader) HashCalls(stub func(string) (string, string, error)) {
	fake.hashMutex.Lock()
	defer fake.hashMutex.Unlock()
	fake.HashStub = stub
}

func (fake *FakeUploader) HashArgsForCall(i int) string {
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	argsForCall := fake.hashArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUploader) HashReturns(result1 string, result2 string, result3 error) {
	fake.hashMutex.Lock()
	defer fake.hashMutex.Unlock()
	fake.HashStub = nil
	fake.hashReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUploader) HashReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.hashMutex.Lock()
	defer fake.hashMutex.Unlock()
	fake.HashStub = nil
	if fake.hashReturnsOnCall == nil {
		fake.hashReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.hashReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUploader) Upload(arg1 string) (string, error) {
	fake.uploadMutex.Lock()
	ret, specificReturn := fake.uploadReturnsOnCall[len(fake.uploadArgsForCall)]
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Upload", []interface{}{arg1})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUploader) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeUploader) UploadCalls(stub func(string) (string, error)) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = stub
}

func (fake *FakeUploader) UploadArgsForCall(i int) string {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	argsForCall := fake.uploadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUploader) UploadReturns(result1 string, result2 error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUploader) UploadReturnsOnCall(i int, result1 string, result2 error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = nil
	if fake.uploadReturnsOnCall == nil {
		fake.uploadReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.uploadReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUploader) UploadFile(arg1 string) (*models.ProductDeploymentFile, error) {
	fake.uploadFileMutex.Lock()
	ret, specificReturn := fake.uploadFileReturnsOnCall[len(fake.uploadFileArgsForCall)]
	fake.uploadFileArgsForCall = append(fake.uploadFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UploadFile", []interface{}{arg1})
	fake.uploadFileMutex.Unlock()
	if fake.UploadFileStub != nil {
		return fake.UploadFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.uploadFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUploader) UploadFileCallCount() int {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	return len(fake.uploadFileArgsForCall)
}

func (fake *FakeUploader) UploadFileCalls(stub func(string) (*models.ProductDeploymentFile, error)) {
	fake.uploadFileMutex.Lock()
	defer fake.uploadFileMutex.Unlock()
	fake.UploadFileStub = stub
}

func (fake *FakeUploader) UploadFileArgsForCall(i int) string {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	argsForCall := fake.uploadFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUploader) UploadFileReturns(result1 *models.ProductDeploymentFile, result2 error) {
	fake.uploadFileMutex.Lock()
	defer fake.uploadFileMutex.Unlock()
	fake.UploadFileStub = nil
	fake.uploadFileReturns = struct {
		result1 *models.ProductDeploymentFile
		result2 error
	}{result1, result2}
}

func (fake *FakeUploader) UploadFileReturnsOnCall(i int, result1 *models.ProductDeploymentFile, result2 error) {
	fake.uploadFileMutex.Lock()
	defer fake.uploadFileMutex.Unlock()
	fake.UploadFileStub = nil
	if fake.uploadFileReturnsOnCall == nil {
		fake.uploadFileReturnsOnCall = make(map[int]struct {
			result1 *models.ProductDeploymentFile
			result2 error
		})
	}
	fake.uploadFileReturnsOnCall[i] = struct {
		result1 *models.ProductDeploymentFile
		result2 error
	}{result1, result2}
}

func (fake *FakeUploader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUploader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.Uploader = new(FakeUploader)
